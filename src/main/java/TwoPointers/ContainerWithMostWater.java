package TwoPointers;

import static java.lang.Math.min;

public class ContainerWithMostWater {

    public static void main(String[] args) {

        int[] height = {1,8,6,2,5,4,8,3,7};
        System.out.println(maxArea(height));
    }

    public static int maxArea(int[] height){

        int left = 0;
        int right = height.length - 1;
        int result = 0;

        while(left < right){ // repete-se at√© left e right se encontrarem
            int altura = min(height[left], height[right]); // a altura √© determinada pela linha mais baixa entre as duas linhas
            int largura = right - left; // A largura do recipiente √© a dist√¢ncia horizontal entre os dois ponteiros.
            int area = altura * largura; // √°rea (ou volume de √°gua) que esse recipiente pode conter

            if(area > result){
                result = area; // Se a √°rea calculada for maior que a maior √°rea que tinha encontrado at√© agora (result), atualiza o result.
            }

            if(height[left] < height[right]){
                left++; // Se a linha da esquerda √© mais baixa, avan√ßas o ponteiro da esquerda, na esperan√ßa de encontrar uma linha mais alta que possa aumentar a √°rea.
            }else{
                right--; // Se a linha da direita √© mais baixa (ou s√£o iguais), recua o ponteiro da direita.
            }

        }

        return result;

    }

}
// üöÄ Primeira itera√ß√£o:                 // üöÄ Segunda itera√ß√£o
// left = 0   -> height[0] = 1           // left = 1 -> height[1] = 8
//right = 8  -> height[8] = 7            // right = 8 -> height[8] = 7

// Altura = min(1, 7) = 1               // Altura = min(8, 7) = 7
//Largura = 8 - 0 = 8                   // Largura = 8 - 1 = 7
//√Årea = 1 √ó 8 = 8                      // √Årea = 7 √ó 7 = 49 ‚úÖ

// como height[left] < height[right]   // continua a percorrer, mas nenhum result bate este:
// entao left++;                       //  üéØ Esta √© a melhor combina√ß√£o poss√≠vel no array: height[1] e height[8].

